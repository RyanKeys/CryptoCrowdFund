const express = require("express");
const expressHandlebars = require("express-handlebars");
const Web3 = require("web3");
var Tx = require("ethereumjs-tx").Transaction;
const bodyParser = require("body-parser");
const app = express();
app.engine("handlebars", expressHandlebars({ defaultLayout: "main" }));
app.set("view engine", "handlebars");
app.use("/static", express.static("public"));
app.use(bodyParser.urlencoded({ extended: true }));
const port = 3000;

//  Allows access to the desired network. Currently pointing to the Rinkeby test network.
const rpcURL = "https://rinkeby.infura.io/v3/fd78f6f784a64fe1a20865081c28a049";
const web3 = new Web3(rpcURL);
// Eventually this will lead to the address of our smart contract.
const address = "0x60680e1c9de55a4e65653b4b56ea93791e7fd64f";
const privateKey = Buffer.from(process.env.PRIVATE_KEY, "hex");

const db = [];

app.get("/", (req, res) => {
  res.render("index");
});

app.get("/listings", (req, res) => {
  res.render("listings", { context: db });
});

app.get("/getting-started", (req, res) => {
  res.render("getting-started");
});

app.listen(port, () => {
  console.log(`Example app listening at http:localhost:${port}`);
});

app.get("/create", (req, res) => {
  res.render("create");
});

app.post("/create", (req, res) => {
  const data =
    "0x6080604052600436106100865760003560e01c806353e9cbbb1161005957806353e9cbbb1461010e5780638da5cb5b146101385780639107185f14610170578063c634e7b614610178578063de2ed8931461019857610086565b80630eb83fcf1461008b5780632f6965b6146100cb5780633197cbb6146100e257806340193883146100f8575b600080fd5b34801561009757600080fd5b506100b86100a63660046105cf565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156100d757600080fd5b506100e06101ae565b005b3480156100ee57600080fd5b506100b860015481565b34801561010457600080fd5b506100b860025481565b34801561011a57600080fd5b506004546101289060ff1681565b60405190151581526020016100c2565b34801561014457600080fd5b50600054610158906001600160a01b031681565b6040516001600160a01b0390911681526020016100c2565b6100e06103cf565b34801561018457600080fd5b506101586101933660046105fd565b6105a5565b3480156101a457600080fd5b506100b860035481565b6001544210156102055760405162461bcd60e51b815260206004820152601d60248201527f54686973206c697374696e67206973207374696c6c206163746976652e00000060448201526064015b60405180910390fd5b60045460ff16156102675760405162461bcd60e51b815260206004820152602660248201527f446f6e6174696f6e73206861766520616c7265616479206265656e20636f6c6c60448201526532b1ba32b21760d11b60648201526084016101fc565b6004805460ff19166001179055600254600354106102c8577f3211eabbd9fb31cebec945ebe610fd89a5b67978264c0f9477741b515d3817f56003546040516102b291815260200190565b60405180910390a16000546001600160a01b0316ff5b604051600081527f3211eabbd9fb31cebec945ebe610fd89a5b67978264c0f9477741b515d3817f59060200160405180910390a160005b6006548110156103cc576006818154811061032a57634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600680546001600160a01b03909216926108fc92600592908690811061036b57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604090810182205490518115909302929091818181858888f193505050501580156103b9573d6000803e3d6000fd5b50806103c48161062d565b9150506102ff565b50565b6000546001600160a01b03163314156104225760405162461bcd60e51b81526020600482015260156024820152742a3434b99034b9903cb7bab9103634b9ba34b7339760591b60448201526064016101fc565b60015442106104735760405162461bcd60e51b815260206004820152601960248201527f54686973206c697374696e672069732066696e69736865642e0000000000000060448201526064016101fc565b600034116104c35760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420646f6e6174696f6e20616d6f756e742e000000000000000060448201526064016101fc565b336000908152600560205260409020541561050857336000908152600560205260409020546104f3903490610615565b3360009081526005602052604090205561055a565b3360008181526005602052604081203490556006805460018101825591527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03191690911790555b346003546105689190610615565b600355604080513381523460208201527f0e04c8e83a5595ba6381972e5e9fe2926bb0a7439dace880c83ccc34b99c5477910160405180910390a1565b600681815481106105b557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000602082840312156105e0578081fd5b81356001600160a01b03811681146105f6578182fd5b9392505050565b60006020828403121561060e578081fd5b5035919050565b6000821982111561062857610628610648565b500190565b600060001982141561064157610641610648565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122032f0181b594cfd907edbe13b14cf3e1b562852f80b4d9cb2304b59cb300b913164736f6c63430008020033";
  web3.eth.getTransactionCount(
    "0xb6f5B3624D51fbA03A801d9AD3586e8a7BBB7575",
    (err, txCount) => {
      const txObject = {
        nonce: web3.utils.toHex(txCount),
        gasLimit: web3.utils.toHex(1000000),
        gasPrice: web3.utils.toHex(web3.utils.toWei("10", "gwei")),
        data: data,
      };
      const tx = new Tx(txObject, { chain: "rinkeby", hardfork: "istanbul" });
      tx.sign(privateKey);
      const serializedTx = tx.serialize();
      const raw = "0x" + serializedTx.toString("hex");

      web3.eth.sendSignedTransaction(raw, (err, txHash) => {
        console.log("err:", err, "txHash", txHash);
      });
    }
  );

  found = false;
  for (var i; i < db.length; i++) {
    if (db[i].address === req.body.address) {
      res.redirect("/create");
    }
  }
  db.push(req.body);
  console.log(req.body);
  console.log(db);
  res.redirect("/listings");
});
